[user]
  name = Michael Bianco
  email = iloveitaly@gmail.com
[github]
  user = iloveitaly
[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  whitespace = fix,space-before-tab,tab-in-indent,trailing-space
  # https://github.com/so-fancy/diff-so-fancy/issues/364#issuecomment-652598381
  pager = "diff-so-fancy | LESS= less --tabs=4 -RFX"
  editor = nano

  # http://stackoverflow.com/questions/18257622/why-is-git-core-preloadindex-default-value-false
  preloadindex = true
  # https://dropbox.tech/application/speeding-up-a-git-monorepo-at-dropbox-with--200-lines-of-code
  untrackedCache = true
  fsmonitor-watchman = .git/hooks/fsmonitor-watchmanv2
[commit]
  # Show the diff as a comment in the commit message template.
  verbose = true
[alias]
  amend = commit --amend --reuse-message=HEAD
  st = status -sb
  ss = status -uno
  f = fuzzy status
  c = checkout
  b = branch
  d = diff
  dc = diff --cached
  cm = commit
  cp = cherry-pick
  logv = log --pretty=fuller
  undo-commit = reset --soft HEAD^

  # review changes exclusive to the current branch (right diff) using Kalidescope
  ksreview = "!f() { local SHA=${1:-HEAD}; local BRANCH=${2:-master}; if [ $SHA == $BRANCH ]; then SHA=HEAD; fi; git difftool $BRANCH...$SHA; }; f"

  # NOTE aliases don't seem to be able to execute sub commands and store the result in a variable
  # i.e. don't try `f() { local=$(git something $1); git something-else $local }`, use xargs instead
  # https://stackoverflow.com/questions/1309430/how-to-embed-bash-script-directly-inside-a-git-alias

  # `ffixup file_path` will automatically fixup against the last modification against the specified file
  # https://stackoverflow.com/questions/26243145/git-aliases-operate-in-the-wrong-directory
  ffixup = "!f() { cd -- ${GIT_PREFIX:-.}; local file=$1; git rev-list --max-count=1 HEAD -- $file | tr -d '[:space:]' | xargs -I{} git commit --fixup={} $file; }; f"

  fixup = !sh -c 'git commit --fixup=$1' -
  squash = !sh -c 'git commit --squash=$1' -
  ri = rebase --interactive --autosquash

  # Like "git show myfile", but uses the last commit that changed "myfile".
	showlast = log -n 1 -p

  sha = !sh -c 'git rev-parse HEAD | tr -d "[:space:]" | pbcopy'
  # http://stackoverflow.com/questions/12373733/staging-deleted-files
  rm-deleted = !git rm $(git ls-files --deleted)

  # http://stackoverflow.com/questions/2514172/listing-each-branch-and-its-last-revisions-date-in-git
  branchdate = !git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--' | less

  # http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
  cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

  # http://urbanautomaton.com/blog/2014/09/22/tracking-method-history-in-git/
  lm = "!f(){ local method=$1; local file=$2; [[ -n \"$method\" && -n \"$file\" ]] || exit 1; git log -L :$method:$file;}; f"

  myprs = "!f(){ local id=$(gh pr list -L100 -A $(git config github.user) | fzf | cut -f1); [ -n \"$id\" ] && gh pr view \"$id\" --web && echo \"$id\"; }; f"
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  log = true
  tool = Kaleidoscope
[format]
  pretty=format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset
[rerere]
  enabled = 0
[credential]
  helper = osxkeychain

# Kaleidoscope stuff
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
  tool = Kaleidoscope
[difftool]
  prompt = false
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[merge]
  ff = only
[gitsh]
  defaultCommand = st
  noGreeting = true
[advice]
  statusHints = false
[hub]
  protocol = https
[gist]
  private = true
[push]
  default = simple
[pull]
  rebase = true
[rebase]
  autoStash = true